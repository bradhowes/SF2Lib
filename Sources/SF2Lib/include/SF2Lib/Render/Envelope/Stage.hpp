// Copyright Â© 2022 Brad Howes. All rights reserved.

#pragma once

#include <cmath>
#include <limits>

#include "SF2Lib/Types.hpp"

namespace SF2::Render::Envelope {

/// Stages defined in the SF2 2.01 spec (except for the `idle` state).
enum struct StageIndex {
  idle = -1,
  delay = 0,
  attack,
  hold,
  decay,
  sustain,
  release
};

inline const char* StageName(StageIndex stageIndex) noexcept {
  switch (stageIndex) {
    case StageIndex::idle: return "idle";
    case StageIndex::delay: return "delay";
    case StageIndex::attack: return "attack";
    case StageIndex::hold: return "hold";
    case StageIndex::decay: return "decay";
    case StageIndex::sustain: return "sustain";
    case StageIndex::release: return "release";
    default: throw "unknown stage value";
  }
}

class Generator;

/**
 Configuration for a single stage of an envelope.
 */
class Stage
{
public:
  inline static constexpr Float minimumCurvature = 1.0e-7;
  inline static constexpr Float maximumCurvature = 10.0;

  Stage() = default;

  /**
   Generate a configuration that will emit a constant value for a fixed or indefinite time.
   */
  void setConstant(int durationInSamples, Float value) noexcept {
    initial_ = value;
    alpha_ = 1.0;
    beta_ = 0.0;
    durationInSamples_ = durationInSamples;
  }

  /**
   Generate a configuration for the delay stage.
   */
  void setDelay(int durationInSamples) noexcept { setConstant(durationInSamples, 0.0); }

  /**
   Generate a configuration for the attack stage.
   */
  void setAttack(int durationInSamples, Float curvature) noexcept {
    curvature = clampedCurvature(curvature);
    initial_ = 0.0;
    alpha_ = calculateAlphaCoefficient(durationInSamples, curvature);
    beta_ = (1.0 + curvature) * (1.0 - alpha_);
    durationInSamples_ = durationInSamples;
  }

  /**
   Generate a configuration for the delay stage.
   */
  void setHold(int durationInSamples) noexcept { setConstant(durationInSamples, 1.0); }

  /**
   Generate a configuration for the decay stage.
   */
  void setDecay(int durationInSamples, Float curvature, Float sustainLevel) noexcept {
    curvature = clampedCurvature(curvature);
    initial_ = 1.0;
    alpha_ = calculateAlphaCoefficient(durationInSamples, curvature);
    beta_ = (sustainLevel - curvature) * (1.0 - alpha_);
    durationInSamples_ = durationInSamples;
  }

  /**
   Generate a configuration for the sustain stage.
   */
  void setSustain(Float level) noexcept { setConstant(std::numeric_limits<int>::max(), level); }

  /**
   Generate a configuration for the release stage.
   */
  void setRelease(int durationInSamples, Float curvature, Float sustainLevel) noexcept {
    curvature = clampedCurvature(curvature);
    initial_ = sustainLevel;
    alpha_ = calculateAlphaCoefficient(durationInSamples, curvature);
    beta_ = (0.0 - curvature) * (1.0 - alpha_);
    durationInSamples_ = durationInSamples;
  }

  /**
   Obtain the next value of a stage.

   @param last last value generated by a stage
   @returns new value
   */
  Float next(Float last) const noexcept { return std::max(std::min(last * alpha_ + beta_, 1.0), 0.0); }

  /// @returns initial envelope value for the stage
  Float initial() const noexcept { return initial_; }

  /// @returns the alpha curve parameter
  Float alpha() const noexcept { return alpha_; }

  /// @returns the beta curve parameter
  Float beta() const noexcept { return beta_; }

  /// @returns the duration of the stage in seconds
  int durationInSamples() const noexcept { return durationInSamples_; }

private:

  static Float clampedCurvature(Float curvature) noexcept {
    return std::clamp(curvature, minimumCurvature, maximumCurvature);
  }

  static Float calculateAlphaCoefficient(int sampleCount, Float curvature) noexcept {
    curvature = clampedCurvature(curvature);
    return std::exp(-std::log((1.0 + curvature) / curvature) / sampleCount);
  }

  // friend class Generator;

  Float initial_{0.0};
  Float alpha_{0.0};
  Float beta_{0.0};
  int durationInSamples_{0};
};

} // namespace SF2::Render::Envelope
